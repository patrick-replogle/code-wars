// Your goal is to write an Event constructor function, which can be used to make event objects.

// An event object should work like this:

// it has a .subscribe() method, which takes a function and stores it as its handler
// it has an .unsubscribe() method, which takes a function and removes it from its handlers
// it has an .emit() method, which takes an arbitrary number of arguments and calls all the stored functions with these arguments
// As this is an elementary example of events, there are some simplifications:

// all functions are called with correct arguments (e.g. only functions will be passed to unsubscribe)
// you should not worry about the order of handlers' execution
// the handlers will not attempt to modify an event object (e.g. add or remove handlers)
// the context of handlers' execution is not important
// each handler will be subscribed at most once at any given moment of time. It can still be unsubscribed and then subscribed again

// using array for storage
class Event {
  constructor() {
    this.functions = []
  }
  subscribe(f) {
    this.functions.push(f)
  }
  
  unsubscribe(f) {
    let index = this.functions.indexOf(f)
    if(index !== -1) {
      this.functions.splice(index, 1)
    }
  }
  emit(...args) {
    this.functions.forEach(func => func(...args))
  }
}

// using set for storage
class Event {
  constructor() {
    this.functions = new Set()
  }
  subscribe(f) {
    this.functions.add(f)
  }
  unsubscribe(f) {
    this.functions.delete(f)
  }
  emit(...args) {
    this.functions.forEach(func => func(...args))
  }
}

// using constructor function
function Event() {
  this.handlers = []
}

Event.prototype.subscribe = function(f) {
  this.handlers.push(f)
}

Event.prototype.unsubscribe = function(f) {
  let index = this.handlers.indexOf(f)
  if(index !== -1){
    this.handlers.splice(index, 1)
  } 
}

Event.prototype.emit = function(...args) {
  this.handlers.forEach(func => func(...args))
}
